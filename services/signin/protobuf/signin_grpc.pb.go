// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.17.3
// source: services/signin/protobuf/signin.proto

package protobuf

import (
	context "context"
	protobuf "github.com/reversTeam/go-ms-tools/services/abs/protobuf"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Signin_Register_FullMethodName = "/go.micro.service.signin.Signin/Register"
	Signin_Validate_FullMethodName = "/go.micro.service.signin.Signin/Validate"
)

// SigninClient is the client API for Signin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SigninClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*protobuf.Response, error)
	Validate(ctx context.Context, in *ValidateSigninRequest, opts ...grpc.CallOption) (*protobuf.Response, error)
}

type signinClient struct {
	cc grpc.ClientConnInterface
}

func NewSigninClient(cc grpc.ClientConnInterface) SigninClient {
	return &signinClient{cc}
}

func (c *signinClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*protobuf.Response, error) {
	out := new(protobuf.Response)
	err := c.cc.Invoke(ctx, Signin_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signinClient) Validate(ctx context.Context, in *ValidateSigninRequest, opts ...grpc.CallOption) (*protobuf.Response, error) {
	out := new(protobuf.Response)
	err := c.cc.Invoke(ctx, Signin_Validate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SigninServer is the server API for Signin service.
// All implementations must embed UnimplementedSigninServer
// for forward compatibility
type SigninServer interface {
	Register(context.Context, *RegisterRequest) (*protobuf.Response, error)
	Validate(context.Context, *ValidateSigninRequest) (*protobuf.Response, error)
	mustEmbedUnimplementedSigninServer()
}

// UnimplementedSigninServer must be embedded to have forward compatible implementations.
type UnimplementedSigninServer struct {
}

func (UnimplementedSigninServer) Register(context.Context, *RegisterRequest) (*protobuf.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedSigninServer) Validate(context.Context, *ValidateSigninRequest) (*protobuf.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validate not implemented")
}
func (UnimplementedSigninServer) mustEmbedUnimplementedSigninServer() {}

// UnsafeSigninServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SigninServer will
// result in compilation errors.
type UnsafeSigninServer interface {
	mustEmbedUnimplementedSigninServer()
}

func RegisterSigninServer(s grpc.ServiceRegistrar, srv SigninServer) {
	s.RegisterService(&Signin_ServiceDesc, srv)
}

func _Signin_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigninServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Signin_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigninServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Signin_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateSigninRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigninServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Signin_Validate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigninServer).Validate(ctx, req.(*ValidateSigninRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Signin_ServiceDesc is the grpc.ServiceDesc for Signin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Signin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "go.micro.service.signin.Signin",
	HandlerType: (*SigninServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Signin_Register_Handler,
		},
		{
			MethodName: "Validate",
			Handler:    _Signin_Validate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/signin/protobuf/signin.proto",
}
