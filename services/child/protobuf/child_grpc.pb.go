// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.17.3
// source: services/child/protobuf/child.proto

package protobuf

import (
	context "context"
	protobuf "github.com/reversTeam/go-ms-tools/services/abs/protobuf"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Child_List_FullMethodName   = "/go.micro.service.child.Child/List"
	Child_Create_FullMethodName = "/go.micro.service.child.Child/Create"
	Child_Get_FullMethodName    = "/go.micro.service.child.Child/Get"
	Child_Update_FullMethodName = "/go.micro.service.child.Child/Update"
	Child_Delete_FullMethodName = "/go.micro.service.child.Child/Delete"
)

// ChildClient is the client API for Child service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChildClient interface {
	List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*protobuf.Response, error)
	Create(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*protobuf.Response, error)
	Get(ctx context.Context, in *protobuf.EntityRequest, opts ...grpc.CallOption) (*protobuf.Response, error)
	Update(ctx context.Context, in *protobuf.EntityRequest, opts ...grpc.CallOption) (*protobuf.Response, error)
	Delete(ctx context.Context, in *protobuf.EntityRequest, opts ...grpc.CallOption) (*protobuf.Response, error)
}

type childClient struct {
	cc grpc.ClientConnInterface
}

func NewChildClient(cc grpc.ClientConnInterface) ChildClient {
	return &childClient{cc}
}

func (c *childClient) List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*protobuf.Response, error) {
	out := new(protobuf.Response)
	err := c.cc.Invoke(ctx, Child_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *childClient) Create(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*protobuf.Response, error) {
	out := new(protobuf.Response)
	err := c.cc.Invoke(ctx, Child_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *childClient) Get(ctx context.Context, in *protobuf.EntityRequest, opts ...grpc.CallOption) (*protobuf.Response, error) {
	out := new(protobuf.Response)
	err := c.cc.Invoke(ctx, Child_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *childClient) Update(ctx context.Context, in *protobuf.EntityRequest, opts ...grpc.CallOption) (*protobuf.Response, error) {
	out := new(protobuf.Response)
	err := c.cc.Invoke(ctx, Child_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *childClient) Delete(ctx context.Context, in *protobuf.EntityRequest, opts ...grpc.CallOption) (*protobuf.Response, error) {
	out := new(protobuf.Response)
	err := c.cc.Invoke(ctx, Child_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChildServer is the server API for Child service.
// All implementations must embed UnimplementedChildServer
// for forward compatibility
type ChildServer interface {
	List(context.Context, *emptypb.Empty) (*protobuf.Response, error)
	Create(context.Context, *emptypb.Empty) (*protobuf.Response, error)
	Get(context.Context, *protobuf.EntityRequest) (*protobuf.Response, error)
	Update(context.Context, *protobuf.EntityRequest) (*protobuf.Response, error)
	Delete(context.Context, *protobuf.EntityRequest) (*protobuf.Response, error)
	mustEmbedUnimplementedChildServer()
}

// UnimplementedChildServer must be embedded to have forward compatible implementations.
type UnimplementedChildServer struct {
}

func (UnimplementedChildServer) List(context.Context, *emptypb.Empty) (*protobuf.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedChildServer) Create(context.Context, *emptypb.Empty) (*protobuf.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedChildServer) Get(context.Context, *protobuf.EntityRequest) (*protobuf.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedChildServer) Update(context.Context, *protobuf.EntityRequest) (*protobuf.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedChildServer) Delete(context.Context, *protobuf.EntityRequest) (*protobuf.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedChildServer) mustEmbedUnimplementedChildServer() {}

// UnsafeChildServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChildServer will
// result in compilation errors.
type UnsafeChildServer interface {
	mustEmbedUnimplementedChildServer()
}

func RegisterChildServer(s grpc.ServiceRegistrar, srv ChildServer) {
	s.RegisterService(&Child_ServiceDesc, srv)
}

func _Child_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChildServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Child_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChildServer).List(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Child_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChildServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Child_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChildServer).Create(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Child_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf.EntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChildServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Child_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChildServer).Get(ctx, req.(*protobuf.EntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Child_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf.EntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChildServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Child_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChildServer).Update(ctx, req.(*protobuf.EntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Child_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf.EntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChildServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Child_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChildServer).Delete(ctx, req.(*protobuf.EntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Child_ServiceDesc is the grpc.ServiceDesc for Child service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Child_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "go.micro.service.child.Child",
	HandlerType: (*ChildServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Child_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Child_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Child_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Child_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Child_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/child/protobuf/child.proto",
}
