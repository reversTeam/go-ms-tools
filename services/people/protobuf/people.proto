syntax = "proto3";

package go.micro.service.people;

option go_package = "github.com/reversTeam/go-ms-tools/services/people/protobuf";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "github.com/reversTeam/go-ms-tools/services/abs/protobuf/abs.proto";

message PeopleCreateParams {
    string firstname = 1;
    string lastname = 2;
    string birthday = 4;
}

message PeopleUpdateParams {
  string id = 1;
	string Status = 2 [json_name="status"];
	google.protobuf.Timestamp ExpireddAt = 3 [json_name="expired_at"];
  string firstname = 4;
  string lastname = 5;
  string birthday = 6;
}

message PeopleResponse {
	string Id = 1 [json_name="id"];
	string Status = 2 [json_name="status"];
	google.protobuf.Timestamp CreatedAt = 3 [json_name = "created_at"];
	google.protobuf.Timestamp UpdatedAt = 4 [json_name="updated_at"];
	google.protobuf.Timestamp ExpiredAt = 5 [json_name="expired_at"];
  string Firstname = 6 [json_name="firstname"];
  string Lastname = 7 [json_name="lastname"];
  string Birthday = 8 [json_name="birthday"];
}

service People {

	rpc List(google.protobuf.Empty) returns (stream PeopleResponse) {
		option (google.api.http) = {
			get: "/people"
		};
	}

	rpc Create(PeopleCreateParams) returns (abs.Response) {
		option (google.api.http) = {
			post: "/people"
			body: "*"
		};
	}

	rpc Get(abs.EntityRequest) returns (PeopleResponse) {
		option (google.api.http) = {
			get: "/people/{id}"
		};
	}

	rpc Update(PeopleUpdateParams) returns (abs.Response) {
		option (google.api.http) = {
			patch: "/people/{id}"
			body: "*"
		};
	}

	rpc Delete(abs.EntityRequest) returns (abs.Response) {
		option (google.api.http) = {
			delete: "/people/{id}"
		};
	}
}