// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.17.3
// source: services/people/protobuf/people.proto

package protobuf

import (
	context "context"
	protobuf "github.com/reversTeam/go-ms-tools/services/abs/protobuf"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	People_List_FullMethodName   = "/go.micro.service.people.People/List"
	People_Create_FullMethodName = "/go.micro.service.people.People/Create"
	People_Get_FullMethodName    = "/go.micro.service.people.People/Get"
	People_Update_FullMethodName = "/go.micro.service.people.People/Update"
	People_Delete_FullMethodName = "/go.micro.service.people.People/Delete"
)

// PeopleClient is the client API for People service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PeopleClient interface {
	List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (People_ListClient, error)
	Create(ctx context.Context, in *PeopleCreateParams, opts ...grpc.CallOption) (*PeopleResponse, error)
	Get(ctx context.Context, in *PeopleEntity, opts ...grpc.CallOption) (*PeopleResponse, error)
	Update(ctx context.Context, in *PeopleUpdateParams, opts ...grpc.CallOption) (*protobuf.Response, error)
	Delete(ctx context.Context, in *PeopleEntity, opts ...grpc.CallOption) (*protobuf.Response, error)
}

type peopleClient struct {
	cc grpc.ClientConnInterface
}

func NewPeopleClient(cc grpc.ClientConnInterface) PeopleClient {
	return &peopleClient{cc}
}

func (c *peopleClient) List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (People_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &People_ServiceDesc.Streams[0], People_List_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &peopleListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type People_ListClient interface {
	Recv() (*PeopleResponse, error)
	grpc.ClientStream
}

type peopleListClient struct {
	grpc.ClientStream
}

func (x *peopleListClient) Recv() (*PeopleResponse, error) {
	m := new(PeopleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *peopleClient) Create(ctx context.Context, in *PeopleCreateParams, opts ...grpc.CallOption) (*PeopleResponse, error) {
	out := new(PeopleResponse)
	err := c.cc.Invoke(ctx, People_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peopleClient) Get(ctx context.Context, in *PeopleEntity, opts ...grpc.CallOption) (*PeopleResponse, error) {
	out := new(PeopleResponse)
	err := c.cc.Invoke(ctx, People_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peopleClient) Update(ctx context.Context, in *PeopleUpdateParams, opts ...grpc.CallOption) (*protobuf.Response, error) {
	out := new(protobuf.Response)
	err := c.cc.Invoke(ctx, People_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peopleClient) Delete(ctx context.Context, in *PeopleEntity, opts ...grpc.CallOption) (*protobuf.Response, error) {
	out := new(protobuf.Response)
	err := c.cc.Invoke(ctx, People_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PeopleServer is the server API for People service.
// All implementations must embed UnimplementedPeopleServer
// for forward compatibility
type PeopleServer interface {
	List(*emptypb.Empty, People_ListServer) error
	Create(context.Context, *PeopleCreateParams) (*PeopleResponse, error)
	Get(context.Context, *PeopleEntity) (*PeopleResponse, error)
	Update(context.Context, *PeopleUpdateParams) (*protobuf.Response, error)
	Delete(context.Context, *PeopleEntity) (*protobuf.Response, error)
	mustEmbedUnimplementedPeopleServer()
}

// UnimplementedPeopleServer must be embedded to have forward compatible implementations.
type UnimplementedPeopleServer struct {
}

func (UnimplementedPeopleServer) List(*emptypb.Empty, People_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedPeopleServer) Create(context.Context, *PeopleCreateParams) (*PeopleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPeopleServer) Get(context.Context, *PeopleEntity) (*PeopleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPeopleServer) Update(context.Context, *PeopleUpdateParams) (*protobuf.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPeopleServer) Delete(context.Context, *PeopleEntity) (*protobuf.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPeopleServer) mustEmbedUnimplementedPeopleServer() {}

// UnsafePeopleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PeopleServer will
// result in compilation errors.
type UnsafePeopleServer interface {
	mustEmbedUnimplementedPeopleServer()
}

func RegisterPeopleServer(s grpc.ServiceRegistrar, srv PeopleServer) {
	s.RegisterService(&People_ServiceDesc, srv)
}

func _People_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PeopleServer).List(m, &peopleListServer{stream})
}

type People_ListServer interface {
	Send(*PeopleResponse) error
	grpc.ServerStream
}

type peopleListServer struct {
	grpc.ServerStream
}

func (x *peopleListServer) Send(m *PeopleResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _People_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeopleCreateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeopleServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: People_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeopleServer).Create(ctx, req.(*PeopleCreateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _People_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeopleEntity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeopleServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: People_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeopleServer).Get(ctx, req.(*PeopleEntity))
	}
	return interceptor(ctx, in, info, handler)
}

func _People_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeopleUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeopleServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: People_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeopleServer).Update(ctx, req.(*PeopleUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _People_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeopleEntity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeopleServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: People_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeopleServer).Delete(ctx, req.(*PeopleEntity))
	}
	return interceptor(ctx, in, info, handler)
}

// People_ServiceDesc is the grpc.ServiceDesc for People service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var People_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "go.micro.service.people.People",
	HandlerType: (*PeopleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _People_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _People_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _People_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _People_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _People_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "services/people/protobuf/people.proto",
}
